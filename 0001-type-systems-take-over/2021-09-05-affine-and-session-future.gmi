# The future of typed computing

## TL;DR

* Together with accepting more programs, there is an effort on improving guarantees by allowing programmers to tighten up the types using type level literals, type level arithmetic and algebras.
* It's achieved by introducing dependent types, which are, in essense, systems that allow you to write functions over types themselves.
* Special kind of types that ensure that each underlying value is used exactly once (or not more than once) are possible. They are called linear (or affine) types.
* These types are collectively called "substructural types" and stem from substructural logic.
* These types power ownership, move semantics and borrow checking in Rust.
* In Rust, affinity is not optional for the end users because it is how memory safety is guaranteed.
* The only industrial language with affine and linear types exposed to the users is Haskell.
* Substructural types enable more proceedings in type systems.
* There are formal methods for reasoning about distributed computing based on process calculi.
* Compared to Turing machines, most of lambda calculi and most other models of computation, process calculi are *not* sequential.
* Type system engineering adopts it via something called "session types".
* There are implementations of session types that rely on linear types.
* Session types are the future of languages like Gleam.

## Why keep doing PLT research

In the previous post we have demonstrated why reincorporating existing and well-studied language features into mainstream languages is largely desired. In this post we'll show why incorporating cutting edge PLT research into new and current language compilers. The two big ideas are:

* Increase expressiveness of typed languages by refusing less valid programs.
* Add new facilities to encode more elaborate statements about the programs.

This post will focus on the latter idea. Arguably, the most important breakthroughs as far as novel type system features are concerned, are:

* Dependent types.
* Session types.

Whereas dependent types are available in general purpose languages like Idris, session types aren't just yet (at the compiler level), but you can check them out in some special languages. Some implementations as libraries exist, some even statically-checked.

=> https://wen.works/posts/2020-12-17-an-introduction-to-session-types.html An Introduction to Session Types
=> https://www.doc.ic.ac.uk/~dorchard/publ/popl16-orchard-yoshida.pdf Effects as Sessions, Sessions as Effects
=> https://groups.inf.ed.ac.uk/abcd/session-implementations.html Session Types in Programming Languages: A Collection of Implementations

## Dependent Types


